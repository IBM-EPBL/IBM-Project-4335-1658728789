import cv2
import numpy as np
import wiotp.sdk.device
import playsound
import random
import time
import datetime
import ibm_boto3
from ibm_botocore.client import Config, ClientError
from cloudant.client import Cloudant
from cloudant.error import CloudantException
from cloudant.result import Result. ResultByKey
from clarifai_grpc.channel.clarifai_channel import ClrifaiChannel
from clarifai_grpc.grpc.api import service_pb2_grpc
stub = service_pb2_grpc.V2Stub(ClarifaiChannel.get_grpc_channel())
from clarifai_grpc.grpc.api import service_pb2, resources_pb2
from clarifai_grpc.grpc.api.status import status_code_pb2
metadata = (('authorization', 'key 0620e202302b4508b90eab7efe7475e5'),)
COS_ENDPOINT = "https://s3.jp-tok.cloud-object-storage.appdomain.cloud  "
COS_API_KEY ID ="eedab167-6600-47a6-8cc6-ecf6a595ca07"
COS_AUTH_ENDPOINT = "https://iam.cloud.ibm.com/identity/token"
COS-RESOURCES_CRN = "crn:v1:bluemix:public:cloud-object-storage:global:a/889ef8b85069463398c090b835a1c95f:eedab167-6600-47a6-8cc6-ecf6a595ca07:bucket:iotbluebird"
clientdb =Cloudant("apikey-v2-1kgdzdgrwrjpk9r4nd0gs2iezsh9st1bzxpmq7ggpc7g","6aaa8e54ee78b89b4d8d7dc791b44f2e",url="https://apikey-v2-1kgdzdgrwrjpk9r4nd0gs2iezsh9st1bzxpmq7ggpc7g:6aaa8e54ee78b89b4d8d7dc791b44f2e@cb6e937d-abf7-4c68-bb79-b503a7a2fb2f-bluemix.cloudantnosqldb.appdomain.cloud") 
clientdb.connect()
cos = ibm_boto3.resouces("s3,
    ibm_api_key_id=COS_API_KEY_ID, 
    ibm_service_instance_id=COS_RESOURCES_CRN,
    ibm_auth_endpoint-COS_AUTH_ENDPOINT,
    config=Config(signature_version="oauth"),
    endpoint_url=COS_ENDPOINT
)
def multi_part_upload(bucket_name,item_name,file_path):
    try:
	  print("Starting file transfer for (0) to bucket:{1}\n".format(item_name,bucket_name))
	  part_size = 1024*1024*5
 	  file_threshold=1024*1024*15
	  transfer_config = ibm_boto3.s3.transfer.TreansferConfig(
	  	multipart_threshold=file_threshold,
		multipart_chunksize=part_size
	  )
	with open(file_path, "rb") as file_data:
		cos.object(bucket_name, item_name).upload_fileobj(
		    Fileobj=file_data,
		    Config=transfer_config
		)
	print("Transfer for (0) Complete!\n.format(item_name))
expert ClientError as be:
	print("CLIENR ERROR: {0}\n.format(be))
expert Exception as e:
	print("Unable to complete multi-part upload: {0}".format(e))

def myCommandCallback(cmd):
	print("Command received: %s" % cmd.data)
	command=cmd.data['command']
	print(command)
	if(command=='lighton') :
		print('lighton')
	elif(command=='lightoff'):
		print(=='lightoff')
	elif(command=='motorpn'):
		print('motoron')
	elif(command=='motoroff'):
		print('motoroff')
myComfig = {
	"identify": {
		"orgId":"------",
		"typeId": "------",
		"deviceId":"----"
	},
	"auth": {
		"token": "-------"
	}
}
client = wiotp.sdk.device.deviceClient(config=myConfig, logHandlers=None)
client.connect()

database_name = "------"
my_database = Client.create)databasse(database_name)
if my_database.exists():
	print(f"'{database_name}' successfully created.")
cap=cv2.videoCapture('garden.mp4')
if(cap.ioOpened()==True):
	print('File opened')
else:
	print('File not found')

while(cap.isOpened()):
	ret, frame = cap.read()
	gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
	ims = cv2.resize(frame, (960, 540))
	cv2.inwrite('exjpg', ims)
	with open("ex.jpg", "rb") as f:
		file_bytes =f.read()
	request = service_pb2.PostModelOutputRequest(
	model_id='--------------',
	inputs=[resources_pb2.Input(data=resources_pb2.Data(image=resources_pb2.Image(base64=file_bytes))
	)])
	response = stub.PostModelOutputs(request, metadata=metadata)
	if response.status.code !=status_code_pb2.SUCCESS:
		raise Exception("Request failed, status code: " + str(response.status.code))
	detect=False
	for concept in response.outputs[0].data.concepts:
		if(concept.value>0.98):
			if(concept.name=="animal"):
				print("Alert! Alert! animal detected")
				playsound.playsound('alert.mp3')
				picname=datetime.datetime.now().strftime("%y-%m-%d-%H-%M")
				cv2.imwrite(picname+'jpg',frame)
				multi_part_upload('iotbluebird', picname+'.jpg',picname+'.jpg')
				json_document={"link":COS_ENDPOINT+'/'+'iotbluebird'+'/'_picname+'.jpg}
				new_document = my_database.create_document(json_document)
				if new_document.exists():
					print(f"Document successfully created.")
				time.sleep(5)
				detect=True
	moist=random.randint(0,100)
	humidity=ramdom.randint(0,100)
	myData={'Animal': detect,'moisture':moist,'humidity':humidity}
	print(myData)
	if(humidity!=None):
		client.publishEvent(eventId="status", msgFormat="json", data=myData, qos=0, onPublish=None)
		print("Publish Ok..")
	client.commandCallback = myCommandCallback
	cv2.imshow('frame',ims)
	if cv2.waitkey(1) & 0xFF == ord('q'):
		break
client.disconnect()
cap.release()
cv2.destroyAllWindows()
	


	